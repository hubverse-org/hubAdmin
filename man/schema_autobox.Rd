% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schema_autobox.R
\name{schema_autobox}
\alias{schema_autobox}
\title{Box elements of a \verb{<config>} class object that can be arrays}
\usage{
schema_autobox(config, box_extra_paths = NULL)
}
\arguments{
\item{config}{a \verb{<config>} class object.}

\item{box_extra_paths}{a list of character vectors of paths to elements in the
\verb{<config>} that can be arrays of vectors but are not covered by the schema.
Elements in a path where arrays of objects are expected should be encoded
as \code{"items"}. See output of \code{\link[=get_array_schema_paths]{get_array_schema_paths()}} for more details,
especially the examples.}
}
\value{
a \verb{<config>} class object with list elements that can be arrays boxed.
}
\description{
Due to inconsistencies between R and JSON data types, in particular the
fact that R has no concept of a scalar, when writing R list objects to JSON with \code{\link[=write_config]{write_config()}},
some properties in the output file may not conform to schema expectations.
In particular, list elements that are vectors of length \code{1L} will be written
as scalars, regardless of whether the schema expects an array. This function
uses the hubverse schema to identify elements that can be arrays and "box" any
such elements that exist in the \verb{<config>} object and have a length of 1.
This ensures that they are written out as arrays instead of scalars in JSON
output files.
}
\examples{
config <- create_config(
  create_rounds(
    create_round(
      round_id_from_variable = TRUE,
      round_id = "origin_date",
      model_tasks = create_model_tasks(
        create_model_task(
          task_ids = create_task_ids(
            create_task_id("origin_date",
              required = NULL,
              optional = c(
                "2023-01-02",
                "2023-01-09",
                "2023-01-16"
              )
            ),
            create_task_id("location",
              required = "US",
              optional = c("01", "02", "04", "05", "06")
            ),
            create_task_id("horizon",
              required = 1L,
              optional = 2:4
            )
          ),
          output_type = create_output_type(
            create_output_type_mean(
              is_required = TRUE,
              value_type = "double",
              value_minimum = 0L
            )
          ),
          target_metadata = create_target_metadata(
            create_target_metadata_item(
              target_id = "inc hosp",
              target_name = "Weekly incident influenza hospitalizations",
              target_units = "rate per 100,000 population",
              target_keys = NULL,
              target_type = "discrete",
              is_step_ahead = TRUE,
              time_unit = "week"
            )
          )
        )
      ),
      submissions_due = list(
        relative_to = "origin_date",
        start = -4L,
        end = 2L
      )
    )
  )
)
schema_autobox(config)
schema_autobox(config) |>
  jsonlite::toJSON(
    auto_unbox = TRUE, na = "string",
    null = "null", pretty = TRUE
  )
}
