% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci_validate_hub_config.R
\name{ci_validate_hub_config}
\alias{ci_validate_hub_config}
\title{Validate Hub config files against hubverse schema}
\usage{
ci_validate_hub_config(
  hub_path = Sys.getenv("HUB_PATH"),
  gh_output = Sys.getenv("GITHUB_OUTPUT"),
  ...
)
}
\arguments{
\item{hub_path}{path to the hub. Defaults to the value of the \code{HUB_PATH}
environment variable.}

\item{gh_output}{path to a file that can record variables for use by other
actions. This defaults to the value of the \code{GITHUB_OUTPUT} environment
variable.}

\item{...}{arguments passed on to \code{\link[=validate_hub_config]{validate_hub_config()}}.}
}
\value{
a logical value indicating if the hub config is valid or not. This
has the side-effect of creating a file called \code{diff.md} in the \code{hub_path}
directory. If running interactively, it will need to be cleaned up.
}
\description{
A continuous integration helper
}
\details{
This function is to be used within a continuous integration context.
It is intended to be used in a workflow that checks the validity of
a hub context. Below is an example setup of steps on GitHub Actions
where the environment variables \code{PR_NUMBER} and \code{HUB_PATH} have been
defined:

\if{html}{\out{<div class="sourceCode yaml">}}\preformatted{     - uses: actions/checkout@v4
     - uses: r-lib/actions/setup-r@v2
       with:
         install-r: false
         use-public-rspm: true
         extra-repositories: 'https://hubverse-org.r-universe.dev'
     - uses: r-lib/actions/setup-r-dependencies@v2
       with:
         cache: 'always'
         packages: |
           any::hubAdmin
           any::sessioninfo
     - name: Run validations
       id: validate
       run: hubAdmin::ci_validate_config()
       shell: Rscript \{0\}
     - name: "Comment on PR"
       id: comment-diff
       if: $\{\{ github.event_name != 'workflow_dispatch' \}\}
       uses: carpentries/actions/comment-diff@main
       with:
         pr: $\{\{ env.PR_NUMBER \}\}
         path: $\{\{ env.HUB_PATH \}\}/diff.md
     - name: Error on Failure
       if: $\{\{ steps.validate.outputs.result == 'false' \}\}
       run: |
         echo "::error title=Invalid Configuration::Errors were detected in one or more config files in 'hub-config/'"
         exit 1
}\if{html}{\out{</div>}}
}
\note{
This function is not intended for interactive use.
}
\examples{
# 
tmp <- tempfile()
out <- tempfile()
dir.create(tmp)
# Results from a valid hub -----------------------------------------
file.copy(
  from = system.file("testhubs/simple/", package = "hubUtils"), 
  to = tmp,
  recursive = TRUE
)
hub <- file.path(tmp, "simple")
ci_validate_hub_config(hub_path = hub, gh_output = out)
# result is true
writeLines(readLines(out))
# message to user shows success and a timestamp
writeLines(readLines(file.path(hub, "diff.md")))

# Results from an invalid hub --------------------------------------
# reset output file
out <- tempfile()
# make the the simple hub invalid by adding a character where
# a number should be
tasks_path <- file.path(hub, "hub-config", "tasks.json")
tasks <- readLines(tasks_path)
writeLines(sub('minimum": 0', 'minimum": "0"', tasks), tasks_path)
# validate
ci_validate_hub_config(hub_path = hub, gh_output = out)
# result is now false
writeLines(readLines(out))
# message to user now shows a table
writeLines(head(readLines(file.path(hub, "diff.md"))))
writeLines(tail(readLines(file.path(hub, "diff.md"))))
}
\keyword{internal}
