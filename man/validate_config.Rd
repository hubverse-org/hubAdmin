% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_config.R
\name{validate_config}
\alias{validate_config}
\title{Validate a hub config file against a hubverse schema}
\usage{
validate_config(
  hub_path = ".",
  config = c("tasks", "admin"),
  config_path = NULL,
  schema_version = "from_config",
  branch = getOption("hubAdmin.branch", default = "main")
)
}
\arguments{
\item{hub_path}{Path to a local hub directory.}

\item{config}{Name of config file to validate. One of \code{"tasks"} or \code{"admin"}.}

\item{config_path}{Defaults to \code{NULL} which assumes all config files are in
the \code{hub-config} directory in the root of hub directory. Argument
\code{config_path} can be used to override default by providing a path to the
config file to be validated.}

\item{schema_version}{Character string specifying the json schema version to
be used for validation. The default value \code{"from_config"} will use the
version specified in the \code{schema_version} property of the config file.
\code{"latest"} will use the latest version available in the hubverse
\href{https://github.com/hubverse-org/schemas}{schemas repository}.
Alternatively, a specific version of a schema (e.g. \code{"v0.0.1"})  can be
specified.}

\item{branch}{The branch of the hubverse
\href{https://github.com/hubverse-org/schemas}{schemas repository}
from which to fetch schema. Defaults to \code{"main"}. Can be set through global
option "hubAdmin.branch".}
}
\value{
Returns the result of validation. If validation is successful, will
return \code{TRUE}. If any validation errors are detected, returns \code{FALSE} with
details of errors appended as a data.frame to an \code{errors} attribute.
To access
the errors table use \code{attr(x, "errors")} where \code{x} is the output of the function.

You can print a more concise and easier to view version of an errors table with
\code{\link[=view_config_val_errors]{view_config_val_errors()}}.
}
\description{
This function validates a single hub config file against it's corresponding
schema.
Note that, for \code{tasks.json} config files, validation is performed
in two stages:
\enumerate{
\item Initial validation against the schema is performed using the
\href{https://docs.ropensci.org/jsonvalidate/}{\code{jsonvalidate}}
package which uses the \code{"ajv"} (Another JSON Schema Validator) validation engine.
\item If the initial validation is successful, additional dynamic validations are
performed.
This means that only after the initial validation passes, will any dynamic
validation errors be detected.
}
}
\examples{
# Valid config file
validate_config(
  hub_path = system.file(
    "testhubs/simple/",
    package = "hubUtils"
  ),
  config = "tasks"
)
# Config file with errors
config_path <- system.file("error-schema/tasks-errors.json",
  package = "hubUtils"
)
validate_config(config_path = config_path, config = "tasks")
}
\seealso{
\code{\link[=view_config_val_errors]{view_config_val_errors()}}

Other functions supporting config file validation: 
\code{\link{validate_hub_config}()},
\code{\link{view_config_val_errors}()}
}
\concept{functions supporting config file validation}
