% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_config.R
\name{write_config}
\alias{write_config}
\title{Write config class object to a JSON file.}
\usage{
write_config(
  config,
  hub_path = ".",
  config_path = NULL,
  overwrite = FALSE,
  silent = FALSE
)
}
\arguments{
\item{config}{Object of class \verb{<config>} to write to a JSON file.}

\item{hub_path}{Path to the hub directory. Defaults to the current working directory.
Ignored if \code{config_path} is specified.}

\item{config_path}{Path to write the config object to. If \code{NULL} defaults to
\code{hub-config/tasks.json} within \code{hub_path}. If specified, overrides \code{hub_path}.}

\item{overwrite}{Logical. Whether to overwrite the file if it already exists.}

\item{silent}{Logical. Whether to suppress informational messages.}
}
\value{
TRUE invisibly.
}
\description{
Write a \strong{tasks} \verb{<config>} class object to a \code{tasks.json} JSON file.
}
\details{
! WARNING: Due to inconsistencies between R and JSON data types, in particular the
fact that R has no concept of a scalar, some properties
in the output file may not conform to schema expectations. They might be an
\verb{<array>} when a \verb{<scalar>} is required or vice versa.
\code{validate_config()} can be used to validate JSON config files and identify any deviations.
Note also that these errors are introduced every time a JSON file is written
from an R object. That includes when reading in a valid JSON config file and
writing it back out.
For more information, see the \href{https://hubverse.io/en/latest/user-guide/hub-config.html#model-tasks-tasks-json-interactive-schema}{hubverse schema documentation}
}
\examples{
rounds <- create_rounds(
  create_round(
    round_id_from_variable = TRUE,
    round_id = "origin_date",
    model_tasks = create_model_tasks(
      create_model_task(
        task_ids = create_task_ids(
          create_task_id("origin_date",
            required = NULL,
            optional = c(
              "2023-01-02",
              "2023-01-09",
              "2023-01-16"
            )
          ),
          create_task_id("location",
            required = "US",
            optional = c("01", "02", "04", "05", "06")
          ),
          create_task_id("horizon",
            required = 1L,
            optional = 2:4
          )
        ),
        output_type = create_output_type(
          create_output_type_mean(
            is_required = TRUE,
            value_type = "double",
            value_minimum = 0L
          )
        ),
        target_metadata = create_target_metadata(
          create_target_metadata_item(
            target_id = "inc hosp",
            target_name = "Weekly incident influenza hospitalizations",
            target_units = "rate per 100,000 population",
            target_keys = NULL,
            target_type = "discrete",
            is_step_ahead = TRUE,
            time_unit = "week"
          )
        )
      )
    ),
    submissions_due = list(
      relative_to = "origin_date",
      start = -4L,
      end = 2L
    )
  )
)
# Create config object
config <- create_config(rounds)
# Create temporary hub
temp_hub <- tempdir()
dir.create(file.path(temp_hub, "hub-config"))
# Write config
write_config(config, hub_path = temp_hub)
cat(readLines(file.path(temp_hub, "hub-config/tasks.json")), sep = "\n")
# Validate config
if (curl::has_internet()) {
  v <- validate_config(hub_path = temp_hub)
  print(v)
  view_config_val_errors(v)
}
# Clean up
unlink(temp_hub)
}
