% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_output_type_item.R
\name{create_output_type_quantile}
\alias{create_output_type_quantile}
\alias{create_output_type_cdf}
\alias{create_output_type_pmf}
\alias{create_output_type_sample}
\title{Create a distribution output type object of class \code{output_type_item}}
\usage{
create_output_type_quantile(
  required,
  optional,
  is_required,
  value_type,
  value_minimum = NULL,
  value_maximum = NULL,
  schema_version = "latest",
  branch = "main"
)

create_output_type_cdf(
  required,
  optional,
  is_required,
  value_type,
  schema_version = "latest",
  branch = "main"
)

create_output_type_pmf(
  required,
  optional,
  is_required,
  value_type,
  schema_version = "latest",
  branch = "main"
)

create_output_type_sample(
  is_required,
  output_type_id_type,
  max_length = NULL,
  min_samples_per_task,
  max_samples_per_task,
  compound_taskid_set = NULL,
  value_type,
  value_minimum = NULL,
  value_maximum = NULL,
  schema_version = "latest",
  branch = "main"
)
}
\arguments{
\item{required}{Atomic vector of required \code{output_type_id} values. Can be NULL if
all values are optional.}

\item{optional}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} \strong{(schema >= v4.0.0)}. Atomic vector of optional
\code{output_type_id} values. Can be NULL if all values are required.}

\item{is_required}{Logical. Is this sample output type required?}

\item{value_type}{Character string. The data type of the output_type values.}

\item{value_minimum}{Numeric. The inclusive minimum of output_type values.}

\item{value_maximum}{Numeric. The inclusive maximum of output_type values.}

\item{schema_version}{Character string specifying the json schema version to
be used for validation. The default value \code{"latest"} will use the latest version
available in the hubverse
\href{https://github.com/hubverse-org/schemas}{schemas repository}.
Alternatively, a specific version of a schema (e.g. \code{"v0.0.1"})  can be
specified.}

\item{branch}{The branch of the hubverse
\href{https://github.com/hubverse-org/schemas}{schemas repository}
from which to fetch schema. Defaults to \code{"main"}.}

\item{output_type_id_type}{Character string. The data type of the output_type_id.
One of "integer" or "character".}

\item{max_length}{Integer. Optional. The maximum length of the output_type_id
value if type is \code{"character"}.}

\item{min_samples_per_task}{Integer. The minimum number of samples per task.
Must be equal to or less than \code{max_samples_per_task}.}

\item{max_samples_per_task}{Integer. The maximum number of samples per task.
Must be equal to or greater than \code{min_samples_per_task}.}

\item{compound_taskid_set}{Character vector. Optional. The set of compound
task IDs that the sample each output type can be associated with.}
}
\value{
a named list of class \code{output_type_item} representing a \code{quantile},
\code{cdf}, \code{pmf} or \code{sample} output type.
}
\description{
Create a representation of a \code{quantile}, \code{cdf}, \code{pmf} or \code{sample} output
type as a list object of class \code{output_type_item}. This can be combined with
additional \code{output_type_item}s using function \code{\link[=create_output_type]{create_output_type()}} to
create an \code{output_type} object for a given model_task.
This can be combined with other building blocks which can then be written as
or appended to \code{tasks.json} Hub config files.
}
\details{
For more details consult
the \href{https://hubverse.io/en/latest/quickstart-hub-admin/tasks-config.html}{documentation on \code{tasks.json} Hub config files}.
}
\section{Functions}{
\itemize{
\item \code{create_output_type_quantile()}: Create a list representation of a \code{quantile}
output type.

\item \code{create_output_type_cdf()}: Create a list representation of a \code{cdf}
output type.

\item \code{create_output_type_pmf()}: Create a list representation of a \code{pmf}
output type.

\item \code{create_output_type_sample()}: Create a list representation of a \code{sample}
output type.

}}
\examples{
create_output_type_quantile(
  required = c(0.25, 0.5, 0.75),
  is_required = TRUE,
  value_type = "double",
  value_minimum = 0
)
create_output_type_cdf(
  required = c(10, 20),
  is_required = FALSE,
  value_type = "double"
)
create_output_type_cdf(
  required = c("EW202240", "EW202241", "EW202242"),
  is_required = TRUE,
  value_type = "double"
)
create_output_type_pmf(
  required = c("low", "moderate", "high", "extreme"),
  is_required = FALSE,
  value_type = "double"
)
create_output_type_sample(
  is_required = TRUE,
  output_type_id_type = "integer",
  min_samples_per_task = 70L, max_samples_per_task = 100L,
  value_type = "double",
  value_minimum = 0,
  value_maximum = 1
)
# Pre v4.0.0 schema output
create_output_type_quantile(
  required = c(0.25, 0.5, 0.75),
  optional = c(
    0.1, 0.2, 0.3, 0.4, 0.6,
    0.7, 0.8, 0.9
  ),
  value_type = "double",
  value_minimum = 0,
  schema_version = "v3.0.1"
)
create_output_type_cdf(
  required = c(10, 20),
  optional = NULL,
  value_type = "double",
  schema_version = "v3.0.1"
)
create_output_type_cdf(
  required = NULL,
  optional = c("EW202240", "EW202241", "EW202242"),
  value_type = "double",
  schema_version = "v3.0.1"
)
create_output_type_pmf(
  required = NULL,
  optional = c("low", "moderate", "high", "extreme"),
  value_type = "double",
  schema_version = "v3.0.1"
)
}
\seealso{
\code{\link[=create_output_type]{create_output_type()}}
}
